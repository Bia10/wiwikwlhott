Confusion arising from choice of terminology
============================================

.. _constr_elems_pts:

Constructors versus elements versus points versus terms versus proofs
---------------------------------------------------------------------

To say that something is a *constructor* of a type :math:`A` means that
the type :math:`A` was defined inductively, and that you are picking one
of the options specifying its datatype. For example, :math:`\mathbf{N}`
has exactly *two* constructors: :math:`0` and :math:`S`. But since, for
example, :math:`S` has type :math:`\mathbf{N}\to\mathbf{N}`,
constructors of a type are not always elements of that type.

To say that something is an *element* of a type :math:`A` means that it
is a variable or expression whose type is :math:`A`. But that means
that, in some non-trivial context, you can have an element of type
:math:`\mathbf{0}`: for example in the context :math:`x:\mathbf{0}`, we
have the element :math:`x` of type :math:`\mathbf{0}`.

Confusingly, even in the context :math:`x:\mathbf{0}`, where we have the
element :math:`x` of type :math:`\mathbf{0}`, we can show that
:math:`\mathbf{0}` does not have any elements, because the claim
":math:`A` does not have any elements" is formalised as :math:`\neg A`,
that is, :math:`A\to\mathbf{0}`, and :math:`\mathbf{0}\to\mathbf{0}` is
indeed inhabited (by the identity function).

*Point* and *proof* are synonyms for *element*.

However, when we claim that some theorem is or is not *provable*, then
this is a meta-theoretic claim.  For example, we may say that, in pure
HoTT, the principle of excluded middle (which, being a logical claim,
is itself encoded as some type, namely
:math:`PEM=\prod_{P:\mathsf{Prop}}P+\neg P`) is not *provable*:
indeed, homotopy type theory is consistent with excluded middle, but
also with its negation.  However, we can't say that the type
:math:`PEM` has no elements, for this would be interpreted by the
statement that the type :math:`PEM` is *empty*, that is, that excluded
middle is *false*!  And in pure HoTT we can't prove that :math:`PEM`
is false, again, because we want to be consistent both with excluded
middle and its negation.

Finally, *term* is a strictly syntactic notion. As a first
approximation, something is a term if it is a string of characters that,
when inserted in a proof assistant, would parse, and have a certain
type. There are no terms of type :math:`\mathbf{0}` (unless HoTT turns
out to be inconsistent).

.. _translating_natural:

Translating claims in natural language to type theory
-----------------------------------------------------

.. todo:: There seems to be some miscommunication regarding which
   statements by HoTTist are internal and which ones are
   metatheoretical, but I can't find the right words to make this
   precise right now.

   First attempt: already in classical math, some claims shouldn't be
   translated literally. for example, the claim "we can prove theorem
   X" doesn't presume an internal formalisation of the notion of
   theorem, provability, an understanding of what "we" means, or any
   kind of modal logic to model the "can".

.. _types_as_spaces:

Types as spaces
---------------

There are (at least) two different notions of "space" and (at least) two
different "circles".

First of all, every type is *thought of* [#spacesemantics]_ as a space: and so the HIT
:math:`S^1` freely generated by a basepoint and a path on that basepoint
is thought of as a homotopical circle. The space-like behavior is given
by the type theory, and can be probed using identity types.

Secondly, there is a certain subset of the real plane
:math:`\mathbf{R}^2` (taking :math:`\mathbf{R}` to be, for example, the
dedekind reals) that represents a circle, namely the subtype of points
with radius 1. The space-like behavior of such spaces *internal to the
theory* is given by whatever notion of space we are interested in: for
example, :math:`\mathbf{R}^2` is often studied as a metric space with a
metric :math:`d:\mathbf{R}^2\times\mathbf{R}^2\to\mathbf{R}`.

These two circles are completely unrelated, unless you add extra syntax
or axioms, such as in real-cohesive HoTT :cite:`shulman:real:cohesive`.

This can be terribly confusing. For example, the fact that every map in
HoTT lifts to a map on the identity types (expressing that if two inputs
to a function are equal, then we can prove the outputs are equal) is
explained in the HoTT book by saying that this means the function is
continuous. So from the HoTT point of view, all functions are
"continuous" in that sense. But in the context of constructive analysis
*inside* HoTT, it is not provable that all functions are continuous, and
in fact it need not be true, for example if one has the principle of
excluded middle.

Even though the link between types and, say, topological spaces (as
defined *inside* HoTT) is broken, the intuition of the internal theory
of those spaces is still used to prove the impossibility of
type-theoretical proofs. For example, it is not provable that any two
points on the higher-inductive circle are equal, which is somewhat odd
since in any drawing of a circle there are at least two obvious paths
between any two points :math:`x` and :math:`y`. As a topological
counter-argument, it is said that the path from :math:`x` to :math:`y`
cannot be chosen in a "continuous" way, in the sense that if you rotate
:math:`x` along the circle one full rotation, you'll have to make a
"jump" in your choice of path at some point. But this counter-argument
is topological in nature, rather than type-theoretic (although there is
a way to make it precise type-theoretically).

Indeed, proofs about types such as the higher-inductive circle look
nothing like their counterparts in topology. Still, they satisfy
*some* of the same properties: if we define the "homotopy group" of a
pointed type correctly, then there is some evidence that the
higher-inductive circles have the same homotopy groups as their
topological counterparts in classical mathematics (in the sense that
this has been shown for a handful of cases). However, some properties
are fundamentally different in a seemingly unfixable way: as a theorem
stated inside type theory, there do not exist any embeddings
:math:`S^1\to S^3` - so higher-inductive types can't be naively used
to formalise knot theory. (One further problem with such an approach
is that HoTT only allows phrasing things that are invariant under
homotopy, which things like "non-self-intersecting" are not.)

.. rubric:: footnotes

.. [#spacesemantics] In fact, not only do we think of a type as a
                     space, but if we take geometric semantics of
                     univalent type theory, such as model categories,
                     every type is interpreted by an actual space.

Sets
----

There are (at least) three notions of sets:

-  The objects studied by a theory such as ZFC. We can take
   intersections of any two such sets, even if this does not make sense
   from an extensional point of view: for example, we can take the
   intersection of :math:`\pi` with the graph of :math:`x\mapsto x^2`,
   as both objects are sets.
-  0-types, which behave simlar to ZFC sets in some aspects. For
   example, for a map :math:`f` between two 0-types (but not between
   arbitrary types), the following are equivalent:

   -  :math:`f` is an injection (equal outputs implies equal inputs).
   -  :math:`f` is an embedding (equal inputs is equivalent to equal
      outputs).
   -  :math:`f` is a monomorphism (with respect to all maps on all
      types).

-  A cumulative hierarchy of sets as in e.g. chapter 10.5 of the HoTT
   book, as an attempt to find a model of an axiomatic set theory like
   ZFC (although this will likely require choice).


Topology
--------

HoTT is *not* a internal language for topology.  By adding modalities
to HoTT, we can talk about types as topological spaces
:cite:`shulman:real:cohesive`.

Homotopy
--------

Within the HoTT community, "homotopy theory" refers to abstract
homotopy theory in the sense of, for example, Quillen model
categories, or more generally homotopy categories. The category of
topological spaces and continuous maps is one such model
category. However, it is not clear if HoTT is an internal language for
*all* model categories. In particular, the "homotopy" of HoTT does not
(necessarily) refer to the homotopies of point-set topology.
